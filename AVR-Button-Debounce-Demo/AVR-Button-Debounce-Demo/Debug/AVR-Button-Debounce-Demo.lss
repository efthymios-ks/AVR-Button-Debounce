
AVR-Button-Debounce-Demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000174  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000174  00000208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800062  00800062  0000020a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000794  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000065d  00000000  00000000  00000a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000033a  00000000  00000000  000010b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  000013f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000380  00000000  00000000  000014a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000016a  00000000  00000000  00001824  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000198e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e7       	ldi	r30, 0x74	; 116
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 36       	cpi	r26, 0x6D	; 109
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  8a:	0c 94 b8 00 	jmp	0x170	; 0x170 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DebounceISR>:
	//Declared as static so it retains its value on each call
	//Initialized only once
	volatile static int8_t debounceCounter = DEBOUNCE_MAX - 1;

	//Get an input sample
	DebounceBuffer[debounceCounter] = PINA;
  92:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__data_start>
  96:	0e 2e       	mov	r0, r30
  98:	00 0c       	add	r0, r0
  9a:	ff 0b       	sbc	r31, r31
  9c:	89 b3       	in	r24, 0x19	; 25
  9e:	ee 59       	subi	r30, 0x9E	; 158
  a0:	ff 4f       	sbci	r31, 0xFF	; 255
  a2:	80 83       	st	Z, r24

	//Roll counter
	debounceCounter--;
  a4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  a8:	81 50       	subi	r24, 0x01	; 1
  aa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	if (debounceCounter < 0)
  ae:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  b2:	88 23       	and	r24, r24
  b4:	1c f4       	brge	.+6      	; 0xbc <DebounceISR+0x2a>
	debounceCounter = DEBOUNCE_MAX - 1;
  b6:	89 e0       	ldi	r24, 0x09	; 9
  b8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
  bc:	08 95       	ret

000000be <DebounceGet>:
}

uint8_t DebounceGet()
{
  be:	29 e0       	ldi	r18, 0x09	; 9
  c0:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t newState;
	uint8_t and = 0xFF;
	uint8_t or = 0x00;
  c2:	40 e0       	ldi	r20, 0x00	; 0
}

uint8_t DebounceGet()
{
	uint8_t newState;
	uint8_t and = 0xFF;
  c4:	8f ef       	ldi	r24, 0xFF	; 255

	//Process data
	for (int8_t i = (DEBOUNCE_MAX - 1); i >= 0; i--)
	{
		//Temporarily use newState variable
		newState = DebounceBuffer[i];
  c6:	f9 01       	movw	r30, r18
  c8:	ee 59       	subi	r30, 0x9E	; 158
  ca:	ff 4f       	sbci	r31, 0xFF	; 255
  cc:	90 81       	ld	r25, Z
		and &= newState;
  ce:	89 23       	and	r24, r25
		or |= newState;
  d0:	49 2b       	or	r20, r25
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	b8 f7       	brcc	.-18     	; 0xc6 <DebounceGet+0x8>
	}

	//Get previous state
	newState = DebouncePreviousPortState;
  d8:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <DebouncePreviousPortState>

	//Keep '1' from AND
	newState |= and;
  dc:	89 2b       	or	r24, r25
	//Keep '0' from OR
	newState &= or;
  de:	84 23       	and	r24, r20
	//	1 | 0 | 1 <-
	//	1 | 1 | 0
	//uint8_t changedBits = newState ^ DebouncePreviousPortState;

	//Update previous state
	DebouncePreviousPortState = newState;
  e0:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <DebouncePreviousPortState>

	return newState;
  e4:	08 95       	ret

000000e6 <main>:
inline void SetupTimer0_1ms()
{
	//CTC mode
	//	WGM01 = 1
	//	WGM00 = 0
	TCCR0 &= ~(1<<WGM00);
  e6:	83 b7       	in	r24, 0x33	; 51
  e8:	8f 7b       	andi	r24, 0xBF	; 191
  ea:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<WGM01);
  ec:	83 b7       	in	r24, 0x33	; 51
  ee:	88 60       	ori	r24, 0x08	; 8
  f0:	83 bf       	out	0x33, r24	; 51
	//	CPU				= 8HMz
	//	Prescaler		= 64
	//	Timer ticks		= 125
	//	OCR				= Timer ticks - 1
	//					= 125 - 1 = 124
	OCR0 = 124;
  f2:	8c e7       	ldi	r24, 0x7C	; 124
  f4:	8c bf       	out	0x3c, r24	; 60

	//Prescaler = 64
	//	CTC02 = 0
	//	CTC01 = 1
	//	CTC00 = 0
	TCCR0 &= ~(1<<CS02);
  f6:	83 b7       	in	r24, 0x33	; 51
  f8:	8b 7f       	andi	r24, 0xFB	; 251
  fa:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= ((1<<CS01) | (1<<CS00));
  fc:	83 b7       	in	r24, 0x33	; 51
  fe:	83 60       	ori	r24, 0x03	; 3
 100:	83 bf       	out	0x33, r24	; 51

	//Enable CTC interrupt 
	TIMSK |= (1<<OCIE0);
 102:	89 b7       	in	r24, 0x39	; 57
 104:	82 60       	ori	r24, 0x02	; 2
 106:	89 bf       	out	0x39, r24	; 57

//Function definitions
inline void SetupIO()
{
	//PA.0 = Input (Active High) = Button 
	DDRA &= (1<<0);
 108:	8a b3       	in	r24, 0x1a	; 26
 10a:	81 70       	andi	r24, 0x01	; 1
 10c:	8a bb       	out	0x1a, r24	; 26
	PORTA &= (1<<0);
 10e:	8b b3       	in	r24, 0x1b	; 27
 110:	81 70       	andi	r24, 0x01	; 1
 112:	8b bb       	out	0x1b, r24	; 27

	//PA.1 = Output = LED 
	DDRA |= (1<<1);
 114:	d1 9a       	sbi	0x1a, 1	; 26

int main(void)
{
	SetupTimer0_1ms();
	SetupIO();
	sei(); 
 116:	78 94       	sei

	while (1)
	{
		uint8_t portSafe = DebounceGet();
 118:	0e 94 5f 00 	call	0xbe	; 0xbe <DebounceGet>

		//If button set
		if (portSafe & (1<<0))
 11c:	80 ff       	sbrs	r24, 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <main+0x3e>
		{
			//Set LED 
			PORTA |= (1<<1);
 120:	d9 9a       	sbi	0x1b, 1	; 27
 122:	fa cf       	rjmp	.-12     	; 0x118 <main+0x32>
		}
		else
		{
			//Reset LED 
			PORTA &= ~(1<<1);
 124:	d9 98       	cbi	0x1b, 1	; 27
 126:	f8 cf       	rjmp	.-16     	; 0x118 <main+0x32>

00000128 <__vector_10>:
	TIMSK |= (1<<OCIE0);
}


ISR(TIMER0_COMP_vect)
{
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	4f 93       	push	r20
 138:	5f 93       	push	r21
 13a:	6f 93       	push	r22
 13c:	7f 93       	push	r23
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
	DebounceISR();
 14a:	0e 94 49 00 	call	0x92	; 0x92 <DebounceISR>
 14e:	ff 91       	pop	r31
 150:	ef 91       	pop	r30
 152:	bf 91       	pop	r27
 154:	af 91       	pop	r26
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	7f 91       	pop	r23
 15c:	6f 91       	pop	r22
 15e:	5f 91       	pop	r21
 160:	4f 91       	pop	r20
 162:	3f 91       	pop	r19
 164:	2f 91       	pop	r18
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
